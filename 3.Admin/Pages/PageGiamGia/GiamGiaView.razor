@page "/viewGiamGia"
@using _2.API.ViewModels.GiamGia;
@using _3.Admin.IServices;
@using _3.Admin.Confirm
@using _1.Data.Model;
@using System.Linq;
@inject IAllServices services
<h3>ViewGiamGia</h3>
@if (giamGias == null)
{
		<div>
				<div class="spinner-border"></div>
		</div>
}
else
{
			<div class="col-auto ">
				 <input class="form-control" @onchange="Search" value="@searchInput" type="text" placeholder="Nhập mã giảm giá cần tìm" />
			</div>
			<div>
						<button type="button" class="btn btn-success" @onclick="Reset">Reset</button>
				
			</div>
			<table class="table table-hover">
					<thead>
						<tr>
							<th>
								Mã giảm giá
							</th>
							<th>
								Chi tiết
							</th>
							<th>
								Số lượng còn lại
							</th>
							<th></th>
						</tr>
					</thead>
					<tbody>
			@foreach (var item in giamGias)
			{
									<tr>
										<td>
						@item.MaGiamGia
										</td>
										<td>
						@item.MoTaChiTiet
										</td>
										<td>
						@item.SoLuong
										</td>
										 <td>
											<a href="/GiamGiaEdit/@item.Id">Cập nhật</a> |
											<button class="btn btn-danger" @onclick="()=>Delete(item.Id)">Delete</button>
										 </td>
									 </tr>
			}
					</tbody>
			</table>
				 <Confirmation ConfirmationMessge="Bạn có chắc muốn xóa"
              ConfirmationTitle="Thông báo của NASA"
              @ref="confirmation"
              ConfirmationChanged="OnConfirmDelete">

		</Confirmation>
					<a href="GiamGiaCreate" class="btn btn-success">Tạo mới</a>
}




@code {
	private List<GiamGia> giamGias;
	private List<ViewGiamGia> lst;
	protected Confirmation confirmation { get; set; }
	private Guid IdGG { get; set; }
	[Inject]
	public NavigationManager NavigationManager { get; set; }
	private string searchInput;

	protected override async Task OnInitializedAsync()
	{
		giamGias = await services.GetAll<GiamGia>("https://localhost:7111/api/GiamGia/Get-All");		
	}

	private void Search(ChangeEventArgs e)
	{
		searchInput = Convert.ToString(e.Value);
		giamGias = giamGias.Where(p => p.MaGiamGia.ToLower().Contains(searchInput.ToLower())).ToList();
		if (!string.IsNullOrEmpty(searchInput))
		{
			if (giamGias.Count == 0)
			{
				giamGias = giamGias;
			}
			giamGias = giamGias.Where(p => p.MaGiamGia.ToLower().Contains(searchInput.ToLower())).ToList();
		}
		giamGias = giamGias;

	}
	private async Task Reset()
	{
		giamGias = await services.GetAll<GiamGia>("https://localhost:7111/api/GiamGia/Get-All");

	}

	public void Delete(Guid id)
	{
		IdGG = id;
		confirmation.Show();
	}

	private async Task OnConfirmDelete(bool confirm)
	{
		if (confirm)
		{
			await services.Remove<GiamGia>("https://localhost:7111/api/GiamGia/GetById/",
		"https://localhost:7111/api/GiamGia/Delete/", IdGG);
			//var url = Path.Combine("/viewGiamGia");
			//NavigationManager.NavigateTo(url);
			giamGias = await services.GetAll<GiamGia>("https://localhost:7111/api/GiamGia/Get-All");
		}
	}
}
